name: Code QA & Release

on:
  push:
    branches: [ "main" ]
    paths:
      - '**/*.rs'
      - '**/Cargo.toml'
      - '**/Cargo.lock'
  pull_request:
    branches: [ "main" ]
    paths:
      - '**/*.rs'
      - '**/Cargo.toml'
      - '**/Cargo.lock'

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-Dwarnings"

jobs:
  detect-changes:
    name: Detect Changed Crates
    runs-on: ubuntu-latest

    outputs:
      changed_crates: ${{ steps.detect-changes.outputs.changed_crates }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history

      - name: Detect changed crates
        id: detect-changes
        run: |
          # Check if HEAD~1 exists
          if git rev-parse HEAD~1 > /dev/null 2>&1; then
            CHANGED_CRATES=$(git diff --name-only HEAD~1..HEAD -- '*.rs' '*/Cargo.toml' | cut -d '/' -f 1 | sort | uniq)
          else
            # If HEAD~1 does not exist, assume all crates are changed (e.g., first commit)
            CHANGED_CRATES=$(find . -maxdepth 1 -type d -not -path './.*' -not -path '.' | cut -d '/' -f 2 | sort | uniq)
          fi

          # Filter directories to include only those with "foxtive" in their names
          VALID_CRATES=""
          for CRATE in $CHANGED_CRATES; do
            if [[ "$CRATE" == *"foxtive"* ]] && [ -f "$CRATE/Cargo.toml" ]; then
              VALID_CRATES="$VALID_CRATES $CRATE"
            fi
          done

          echo "Changed crates: $VALID_CRATES"
          echo "changed_crates=$VALID_CRATES" >> $GITHUB_ENV

  test-code:
    name: Test Codebase
    runs-on: ubuntu-latest
    needs: detect-changes

    steps:
      - uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-unknown-linux-gnu

      - name: Run Clippy and Tests on changed crates
        run: |
          if [ -z "$changed_crates" ]; then
            echo "No crates changed."
            exit 0
          fi

          for CRATE in $changed_crates; do
            echo -e "\n"
            echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
            echo "Running Clippy and Tests for crate: $CRATE"
            cargo clippy --package $CRATE --all-features
            cargo test --package $CRATE --all-features
            echo "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
          done

  release:
    name: Release Package
    runs-on: ubuntu-latest
    needs: [detect-changes, test-code]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-unknown-linux-gnu

      - name: Publish changed crates
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          if [ -z "$changed_crates" ]; then
            echo "No crates changed. Skipping release."
            exit 0
          fi

          for CRATE in $changed_crates; do
            echo -e "\n"
            echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
            echo "Publishing $CRATE..."
            cargo publish -p $CRATE
            echo "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
          done

  lint-code:
    name: Lint Codebase
    runs-on: ubuntu-latest
    needs: [detect-changes, test-code, release]
    permissions:
      contents: write
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Run cargo fmt
        run: cargo fmt --all

      - name: Commit fmt changes
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"
          git add .
          git commit -m "style(cargo-fmt): apply changes" || echo "No changes to commit"

      - name: Push fmt changes
        run: git push origin HEAD:${{ github.ref }}
